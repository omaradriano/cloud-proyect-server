"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const generateDocs_1 = __importDefault(require("../utils/generateDocs"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const axios_1 = __importDefault(require("axios"));
const files = (0, express_1.Router)();
files.post('/download/:file/:type', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const info = req.body; //La entrada de informacion va a ser valorada por el lado del usuario, de este lado se da por hecho que se envía la información correcta.
    let { file, type } = req.params;
    try {
        yield (0, generateDocs_1.default)(file, info);
        const entryFilePath = path_1.default.resolve(__dirname, '..', 'templates', 'autogenerated', 'auto_generated.docx');
        if (!fs_1.default.existsSync(entryFilePath)) {
            throw new Error('El archivo docx no existe o no se generó correctamente');
        }
        console.log('Archivo docx generado');
        if (type === 'docx') {
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
            res.setHeader('Content-Disposition', `attachment; filename=${file}.docx`);
            const docxBuffer = fs_1.default.readFileSync(entryFilePath);
            res.status(200).send(docxBuffer);
        }
        else if (type === 'pdf') {
            /** Establece headers en caso de enviar un pdf (Estos headers son necesarios en caso de enviar un archivo pdf como respuesta, este no es el caso pero aqui los voy a dejar por si acaso. NO BORRAR)*/
            // res.setHeader("Content-Type", "application/pdf");
            // res.setHeader("Content-Disposition", `attachment; filename=${file}.pdf`);
            // // Convertir a Base64
            const base64String = Buffer.from(fs_1.default.readFileSync(entryFilePath)).toString('base64');
            if (!base64String || typeof base64String !== 'string')
                throw new Error('No se ha podido generar el formato base64');
            var options = {
                method: 'POST',
                url: 'https://api.apyhub.com/convert/word-base64/pdf-url',
                params: { output: 'test-sample.pdf', landscape: 'false' },
                headers: {
                    'apy-token': 'APY0QZXu17wejUg6UBftUUSdp42D2IsVdw8uhAjQIXXqTOeAAgCsWbdqxmEZDmrbiqiejZEz',
                    'Content-Type': 'application/json'
                },
                data: { base64: base64String }
            };
            axios_1.default.request(options).then(function (response) {
                console.log(response.data.data);
                res.status(200).json({ message: 'Archivo generado satisfactoriamente', url: String(response.data.data) });
                // console.log("Lectura para borrar los archivos");
                fs_1.default.readdir(path_1.default.resolve(__dirname, "..", 'templates', 'autogenerated'), (err, archivos) => {
                    if (err)
                        throw new Error('Error al leer el directorio autogenerated');
                    // Itera sobre cada archivo en el directorio
                    archivos.forEach(nombreArchivo => {
                        // Obtiene la ruta completa del archivo
                        const rutaArchivo = path_1.default.join(path_1.default.resolve(__dirname, "..", 'templates', 'autogenerated'), nombreArchivo);
                        // Borra el archivo
                        fs_1.default.unlink(rutaArchivo, err => {
                            if (err)
                                throw new Error('Error al borrar un archivo');
                            console.log(`Archivo ${nombreArchivo} eliminado`);
                        });
                    });
                });
            }).catch(function (error) {
                let errorMessage = 'Error desconocido';
                if (error instanceof Error)
                    errorMessage = error.message;
                res.status(500).json({ message: errorMessage });
            });
        }
    }
    catch (error) {
        let errorMessage = 'Error desconocido';
        if (error instanceof Error)
            errorMessage = error.message;
        console.log(error);
        res.status(500).json({ message: errorMessage });
    }
}));
exports.default = files;
//# sourceMappingURL=files.routes.js.map