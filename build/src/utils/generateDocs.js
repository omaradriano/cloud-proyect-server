"use strict";
/**
 * Este archivo permite realizar la generacion de un archivo docx en base a un plantilla pregenerada.
 * La plantilla se encuentra en ~/src/templates/prebuilded
 *
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// PizZip is required because docx/pptx/xlsx files are all zipped files, and
// the PizZip library allows us to load the file in memory
const pizzip_1 = __importDefault(require("pizzip"));
const docxtemplater_1 = __importDefault(require("docxtemplater"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
function createDocx(template, info) {
    return __awaiter(this, void 0, void 0, function* () {
        // console.log(path.resolve(__dirname);
        //Leer y cargar el contenido como binario
        const content = fs_1.default.readFileSync(path_1.default.resolve(__dirname, '..', 'templates', 'prebuilded', `template_${template}.docx`), "binary");
        // Unzip the content of the file
        const zip = new pizzip_1.default(content);
        // This will parse the template, and will throw an error if the template is
        // invalid, for example, if the template is "{user" (no closing tag)
        const doc = new docxtemplater_1.default(zip, {
            paragraphLoop: true,
            linebreaks: true,
        });
        //Cargar la informacion recibida dentro del documento
        // console.log(info);
        doc.render(info);
        //Construir el documento y generar un buffer
        const buff = doc.getZip().generate({
            type: "nodebuffer",
            // compression: DEFLATE adds a compression step.
            // For a 50MB output document, expect 500ms additional CPU time
            compression: "DEFLATE",
        });
        fs_1.default.writeFileSync(path_1.default.resolve(__dirname, '..', 'templates', 'autogenerated', 'auto_generated.docx'), buff);
    });
}
exports.default = createDocx;
//# sourceMappingURL=generateDocs.js.map